Morph subclass: #CollisionObject	instanceVariableNames: 'theship theenemies'	classVariableNames: ''	package: 'SpaceInvaders'!!CollisionObject commentStamp: 'Jeff 9/6/2019 15:28' prior: 0!A superclass for any game object that occupies an area and can collide with other objects.!!CollisionObject methodsFor: 'gamelogic' stamp: 'JaimeDanguillecourt 4/14/2020 22:31'!collidesWith: other	"Returns a bool indicating if this object collides with other, that is, if their bounding rectangles overlap"	"TODO: Return true when the self object overlaps with the parameter. This is used to detect when a bullet strikes	an enemy, and when an enemy strikes the ship."	(self bounds containsPoint: other bounds origin) ifTrue: [ ^true ].	^false.! !CollisionObject subclass: #Bullet	instanceVariableNames: ''	classVariableNames: ''	package: 'SpaceInvaders'!!Bullet commentStamp: 'Jeff 9/6/2019 15:28' prior: 0!A bullet that gets shot by the ship.!!Bullet methodsFor: 'drawing' stamp: 'Jeff 9/6/2019 16:01'!drawOn: aCanvas	"Draw the bullet on the screen"	aCanvas fillOval: self bounds color: Color white.! !!Bullet methodsFor: 'initialization' stamp: 'Jeff 9/13/2019 23:55'!initialize 	"Create a new bullet with the appropriate size"	super initialize.	self extent: (3@3).	^self.! !CollisionObject subclass: #Enemy	instanceVariableNames: 'direction'	classVariableNames: ''	package: 'SpaceInvaders'!!Enemy commentStamp: 'Jeff 9/6/2019 15:28' prior: 0!A space alien unit.!!Enemy methodsFor: 'drawing' stamp: 'Jeff 12/4/2019 12:43'!drawOn: aCanvas	"Draw enemy shape on screen"	aCanvas fillOval: self bounds color: Color red.	aCanvas drawPolygon: { self bounds topLeft. self bounds center. self bounds leftCenter } fillStyle: Color lightRed . 	aCanvas drawPolygon: { self bounds topRight. self bounds center. self bounds rightCenter } fillStyle: Color lightRed . 	aCanvas drawString: '^' in: (self bounds translateBy: 3@3).! !!Enemy methodsFor: 'accessing' stamp: 'Jeff 9/6/2019 16:02'!move	"Move the enemy to its next position. Make sure it doesn't move outside the visible area of its container,	which is accessible as owner. If it reaches an edge, move it to the next row and change direction"	|newx deltax|	newx := self position x.	deltax := 10.	direction ifTrue: [ deltax := deltax negated. ].	newx := newx + deltax.	self position: newx@(self position y).		(self position x < (owner left)) | (self position x > (owner right)) ifTrue: [self setDirection: direction not. self position: self position + (0@30).].	^self.! !!Enemy methodsFor: 'initialization' stamp: 'Jeff 9/6/2019 16:02'!setDirection: aDir	"Set the direction of movement of the enemy: true is right, left is left"	direction := aDir.! !!Enemy methodsFor: 'initialization' stamp: 'Jeff 9/14/2019 00:02'!setPositionByNumber: n	"Create a new enemy having the given number"	|x y|	self extent: 20@20.	x:=owner bounds left + (30*n).	y:=(x/owner bounds width) rounded.	self setDirection: y odd.	y:=y*30.	x:=x rem: owner bounds width.	self position: x@y.	^self.! !CollisionObject subclass: #Ship	instanceVariableNames: ''	classVariableNames: ''	package: 'SpaceInvaders'!!Ship commentStamp: 'Jeff 9/6/2019 15:29' prior: 0!The player's ship.!!Ship methodsFor: 'drawing' stamp: 'Jeff 9/6/2019 16:00'!drawOn: aCanvas	"Draw the ship image on the screen"	aCanvas drawPolygon: { self bounds bottomLeft. self bounds bottomRight. self bounds topCenter. } fillStyle: Color green.	aCanvas fillRectangle: ((self bounds insetBy: 8) translateBy: (-4@(-2))) color: Color lightGreen.	aCanvas fillRectangle: ((self bounds insetBy: 8) translateBy: (4@(-2))) color: Color lightGreen.! !Morph subclass: #SpaceInvaders	instanceVariableNames: 'theship theenemies thebullets ticks'	classVariableNames: ''	package: 'SpaceInvaders'!!SpaceInvaders commentStamp: 'Jeff 9/6/2019 15:29' prior: 0!Main game object.Create and run with	SpaceInvaders go.!!SpaceInvaders methodsFor: 'gamelogic' stamp: 'Jeff 9/6/2019 12:24'!makeShip	"comment stating purpose of message"	|ship|	ship:=Ship new extent: 20@20; position: self bounds bottomCenter.	self addMorph: ship.	^ship.! !!SpaceInvaders methodsFor: 'initialization' stamp: 'Jeff 9/6/2019 16:06'!step	"This function is called at regular intervals to effectuate the	movement of objects in the game. Bullets and enemies should go to their	next position. We check for collisions between bulltes and enemies,	as well as between enemies and the player ship"	|deadbullets deadenemies|	thebullets do: [ :bullet |		 bullet position: bullet position - (0@10).		].	thebullets := thebullets select: [ :bullet | |result|		result:=bullet position y > self bounds top.		result ifFalse: [ self removeMorph: bullet ].		result ].			deadbullets := thebullets select: [ :bullet| theenemies anySatisfy: [:someenemy| someenemy collidesWith: bullet].  ]. 	deadenemies := theenemies select: [ :enemy | thebullets anySatisfy: [:somebullet | somebullet collidesWith: enemy ] . ].	deadbullets do:[:bullet|self removeMorph: bullet].	deadenemies do:[:enemy|self removeMorph: enemy].	thebullets removeAll: deadbullets.	theenemies removeAll: deadenemies.		theenemies isEmpty ifTrue: [ self gameOver.  ].	(theenemies anySatisfy: [ :enemy | enemy collidesWith: theship ]) ifTrue: [ self gameOver. ].		(ticks rem: 5) = 0 ifTrue: [		theenemies do:  [ :enemy|enemy move. ].	].		ticks:=ticks +1.! !!SpaceInvaders methodsFor: 'initialization' stamp: 'Jeff 9/6/2019 16:04'!gameOver	"When the game is over, stop doing animations"	self stopStepping.! !!SpaceInvaders methodsFor: 'initialization' stamp: 'Jeff 9/14/2019 00:03'!setUp	"Set up the initial game variables:		thebullets is an empty collection of Bullet objects		theenemies is a collection of 20 enemies, such that each row of enemies moves in a different direction		theship is a ship		ticks counts the number of frames drawn so far"	theenemies := OrderedCollection new.	thebullets := OrderedCollection new.	self extent: 400@400.	1 to: 20 do: [ :i | 		|enemy|		enemy:= Enemy new.		theenemies add: enemy.		self addMorph: enemy.		enemy setPositionByNumber: i ].	theship := self makeShip.	ticks:=0.	self startStepping.! !!SpaceInvaders methodsFor: 'initialization' stamp: 'Jeff 9/14/2019 00:04'!stepTime	"Sets the time interval between steps of animation"	^50.! !!SpaceInvaders methodsFor: 'user-interface' stamp: 'Jeff 9/6/2019 12:45'!mouseLeave: anEvent	 anEvent hand newKeyboardFocus: nil! !!SpaceInvaders methodsFor: 'user-interface' stamp: 'Jeff 9/6/2019 12:45'!mouseEnter: anEvent	 anEvent hand newKeyboardFocus: self! !!SpaceInvaders methodsFor: 'user-interface' stamp: 'Jeff 9/6/2019 12:50'!handlesKeyDown: ev	^true.! !!SpaceInvaders methodsFor: 'user-interface' stamp: 'Jeff 9/6/2019 12:45'!handlesMouseOver: anEvent	^true.! !!SpaceInvaders methodsFor: 'user-interface' stamp: 'JaimeDanguillecourt 4/14/2020 22:47'!keyDown: ev	"Invoked in response to key events. The keyValue method on ev returns a numeric value correspondng to a keypress"	|key|	key:=ev keyValue.	key = 32 & (thebullets size < 4) ifTrue: [		|bullet |		bullet := Bullet new.		bullet position: (theship bounds origin x) @ (theship bounds top).		thebullets add: bullet.	].	key = 28 ifTrue: [  		(theship bounds left > self bounds left) ifTrue: [ theship position: (theship position x - 1) @ (theship position y)].	].	key = 29 ifTrue: [  		(theship bounds right < self bounds right) ifTrue: [ theship position: (theship position x + 1) @ (theship position y)].	].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SpaceInvaders class	instanceVariableNames: ''!!SpaceInvaders class methodsFor: 'navigating' stamp: 'Jeff 9/13/2019 23:51'!go	|si w|	si:=self new.	si setUp.	w:=si openInWindow.	w setLabel: 'Space Invaders'.	^w.! !