EllipseMorph subclass: #Ball	instanceVariableNames: 'v'	classVariableNames: ''	package: 'Bouncy'!!Ball commentStamp: 'Jeff 8/29/2019 14:16' prior: 0!A represent a single bouncy ball, a circle that moves with a velocity and bounce off the edges of its owner.!!Ball methodsFor: 'initialization' stamp: 'Jeff 8/29/2019 13:53'!initialize 	"Create a new ball with default size and velocity"	super initialize.	self extent: 15@15.	v:=5@5.	self color: Color black.! !!Ball methodsFor: 'initialization' stamp: 'JaimeDanguillecourt 4/14/2020 22:05'!advance	"Update the position of the ball by velocity and check for wall collisions"	(owner bounds left >= self position x or: self position x >= owner bounds right) ifTrue: [ self setVelocity: ( v x ) negated  @ ( v y) ].	(owner bounds top >= self position y or: owner bounds bottom <= self position y) ifTrue: [ self setVelocity: ( v x) @ ( v y ) negated ].	self position: (self position x + v x) @ (self position y + v y) 	! !!Ball methodsFor: 'initialization' stamp: 'Jeff 8/29/2019 13:53'!setVelocity: aVelocity 	"Set the velocity of the ball to the two-dimensional value aVelocity"	v:=aVelocity.! !!Ball methodsFor: 'positioning' stamp: 'Jeff 8/29/2019 14:17'!randomizePosition: aRect		"Given a rectagle, set the position of this ball to somewhere inside it"		self position: (aRect left to: aRect right) atRandom @ (aRect top to: aRect bottom) atRandom.! !!Ball methodsFor: 'positioning' stamp: 'Jeff 8/29/2019 14:18'!randomizeVelocity: range	"Given a Range, set the two-dimensional velocity such that its components are within that range"	self setVelocity: range atRandom @ range atRandom.! !Morph subclass: #Bouncy	instanceVariableNames: 'balls active'	classVariableNames: ''	package: 'Bouncy'!!Bouncy commentStamp: 'Jeff 8/29/2019 14:15' prior: 0!I am a window that shows various balls bancing around.You can click on me with the left mouse button to pause the action, and with the right mouse button to add another ball.!!Bouncy methodsFor: 'event handling' stamp: 'JaimeDanguillecourt 4/14/2020 22:22'!mouseDown: anEvent	"Called in response to a mouse click"	|ball|	anEvent redButtonPressed "left mouse button"		ifTrue: [ active := active not.			active				ifTrue: [ self startStepping ]				ifFalse: [ self stopStepping ] ].	 anEvent yellowButtonPressed "right mouse button"		ifTrue: [  		ball := Ball new.		ball randomizeVelocity: (-5 to: 5).		ball position: (anEvent position x) @ (anEvent position y).		balls add: ball.		self addMorph: ball.			].! !!Bouncy methodsFor: 'event handling' stamp: 'Jeff 8/29/2019 14:08'!handlesMouseDown:  anEvent	^true.! !!Bouncy methodsFor: 'drawing' stamp: 'Jeff 8/29/2019 14:18'!drawOn: aCanvas	"Draw the background of the window"	super drawOn: aCanvas.	aCanvas fillOval: (self bounds insetBy: 4) color: Color lightBlue.! !!Bouncy methodsFor: 'initialization' stamp: 'Jeff 8/29/2019 15:09'!initialize	"initializes the local variables and sets up default window size"	super initialize.	active:=true.	balls:=OrderedCollection new.	self extent: 400@400.! !!Bouncy methodsFor: 'initialization' stamp: 'Jeff 8/29/2019 15:10'!makeBalls: howMany	"Creates an arbitrary number of balls and inserts them into the window"	howMany timesRepeat: [ 		|ball|		ball := Ball new.		ball randomizeVelocity: (-5 to: 5).		ball randomizePosition: self bounds.		balls add: ball.		self addMorph: ball.		 ].! !!Bouncy methodsFor: 'stepping and presenter' stamp: 'Jeff 8/29/2019 14:19'!step	"This method is called repeatedly every 50ms to advance the position of the balls"	balls do: [ :ball | 		ball advance.		 ].! !!Bouncy methodsFor: 'stepping and presenter' stamp: 'Jeff 8/29/2019 14:19'!stepTime	"Indicates to Morphic the frequency with which the step method should be called"	^50.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Bouncy class	instanceVariableNames: ''!!Bouncy class methodsFor: 'navigating' stamp: 'Jeff 8/29/2019 13:55'!go	"Set up a bounch and show it on the desktop"	|bouncy|	bouncy := self new.	bouncy makeBalls: 5.	bouncy startStepping.	bouncy openInWindow.	^bouncy.! !