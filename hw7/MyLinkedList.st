Object subclass: #MyLinkedList	instanceVariableNames: 'front'	classVariableNames: ''	package: 'MyLinkedList'!!MyLinkedList commentStamp: 'Jeff 3/6/2020 20:45' prior: 0!I am a linked list, consisting of nodes.!!MyLinkedList methodsFor: 'enumerating' stamp: 'Jeff 3/6/2020 20:49'!do: aBlock 	|v|	v:=front.	[ v isNotNil] whileTrue: [ 		aBlock value: v data.		v := v next. 	].	^ self.! !!MyLinkedList methodsFor: 'enumerating' stamp: 'JaimeDanguillecourt 4/5/2020 15:19'!collect: aBlock	"I return a new MyLinkedList w/ the aBlock applied to every element of my original self"	| ll v lst |	lst := OrderedCollection new.	ll := self class new.	v := front.	[ v isNotNil ]		whileTrue: [ lst add: (aBlock value: v data).			v := v next ].	1 to: lst size do: [ :elem | ll add: (lst reverse at: elem) ].	^ ll! !!MyLinkedList methodsFor: 'adding' stamp: 'Jeff 3/6/2020 20:47'!add: newObject	|newnode|	newnode:=Node new.	newnode data: newObject.	newnode next: front.	front := newnode.	^newObject.! !!MyLinkedList methodsFor: 'accessing' stamp: 'Jeff 3/6/2020 20:58'!front: f	front:=f.! !!MyLinkedList methodsFor: 'printing' stamp: 'JaimeDanguillecourt 4/5/2020 15:19'!printOn: aStream	"I output to a stream"	| v output |	v := front.	output := 'a MyLinkedList('.	v		ifNil: [ output := output , ')'.			aStream nextPutAll: output.			^ self ].	[ v isNotNil and: v next isNotNil ]		whileTrue: [ output := output , v data printString , ' '.			v := v next ].	output := output , v data printString , ')'.	aStream nextPutAll: output.	^ self! !Object subclass: #Node	instanceVariableNames: 'data next'	classVariableNames: ''	package: 'MyLinkedList'!!Node commentStamp: 'Jeff 3/6/2020 20:43' prior: 0!I am a single node on a linked list.!!Node methodsFor: 'accessing' stamp: 'Jeff 3/6/2020 20:44'!next	^next.! !!Node methodsFor: 'accessing' stamp: 'Jeff 3/6/2020 20:44'!next: n	next:=n.! !!Node methodsFor: 'accessing' stamp: 'Jeff 3/6/2020 20:44'!data	^data.! !!Node methodsFor: 'accessing' stamp: 'Jeff 3/6/2020 20:44'!data: d	data:=d.! !